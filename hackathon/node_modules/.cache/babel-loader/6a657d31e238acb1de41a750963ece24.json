{"ast":null,"code":"import * as React from 'react';\nimport { useEventCallback } from '../utils';\n\nconst useTouchRipple = props => {\n  const {\n    disabled,\n    disableFocusRipple,\n    disableRipple,\n    disableTouchRipple,\n    focusVisible,\n    rippleRef\n  } = props;\n  React.useEffect(() => {\n    if (focusVisible && !disableFocusRipple && !disableRipple) {\n      var _rippleRef$current;\n\n      (_rippleRef$current = rippleRef.current) == null ? void 0 : _rippleRef$current.pulsate();\n    }\n  }, [rippleRef, focusVisible, disableFocusRipple, disableRipple]);\n\n  function useRippleHandler(rippleAction, skipRippleAction = disableTouchRipple) {\n    return useEventCallback(event => {\n      if (!skipRippleAction && rippleRef.current) {\n        rippleRef.current[rippleAction](event);\n      }\n\n      return true;\n    });\n  }\n\n  const keydownRef = React.useRef(false);\n  const handleKeyDown = useEventCallback(event => {\n    if (!disableFocusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {\n      keydownRef.current = true;\n      rippleRef.current.stop(event, () => {\n        var _rippleRef$current2;\n\n        rippleRef == null ? void 0 : (_rippleRef$current2 = rippleRef.current) == null ? void 0 : _rippleRef$current2.start(event);\n      });\n    }\n  });\n  const handleKeyUp = useEventCallback(event => {\n    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed\n    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0\n    if (!disableFocusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {\n      keydownRef.current = false;\n      rippleRef.current.stop(event, () => {\n        var _rippleRef$current3;\n\n        rippleRef == null ? void 0 : (_rippleRef$current3 = rippleRef.current) == null ? void 0 : _rippleRef$current3.pulsate(event);\n      });\n    }\n  });\n  const handleBlur = useRippleHandler('stop', false);\n  const handleMouseDown = useRippleHandler('start');\n  const handleContextMenu = useRippleHandler('stop');\n  const handleDragLeave = useRippleHandler('stop');\n  const handleMouseUp = useRippleHandler('stop');\n  const handleMouseLeave = useRippleHandler('stop');\n  const handleTouchStart = useRippleHandler('start');\n  const handleTouchEnd = useRippleHandler('stop');\n  const handleTouchMove = useRippleHandler('stop');\n  const [mountedState, setMountedState] = React.useState(false);\n  React.useEffect(() => {\n    setMountedState(true);\n  }, []);\n  const enableTouchRipple = mountedState && !disableRipple && !disabled;\n  const getRippleHandlers = React.useMemo(() => {\n    const rippleHandlers = {\n      onBlur: handleBlur,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseLeave: handleMouseLeave,\n      onContextMenu: handleContextMenu,\n      onDragLeave: handleDragLeave,\n      onTouchStart: handleTouchStart,\n      onTouchEnd: handleTouchEnd,\n      onTouchMove: handleTouchMove\n    };\n    return (otherEvents = {}) => {\n      const eventNames = Object.keys(rippleHandlers);\n      const wrappedEvents = eventNames.map(eventName => ({\n        name: eventName,\n        handler: ev => {\n          var _otherEvents$eventNam;\n\n          (_otherEvents$eventNam = otherEvents[eventName]) == null ? void 0 : _otherEvents$eventNam.call(otherEvents, ev);\n          rippleHandlers[eventName](ev);\n        }\n      }));\n      return wrappedEvents.reduce((acc, current) => {\n        acc[current.name] = current.handler;\n        return acc;\n      }, {});\n    };\n  }, [handleBlur, handleKeyDown, handleKeyUp, handleMouseDown, handleMouseUp, handleMouseLeave, handleContextMenu, handleDragLeave, handleTouchStart, handleTouchEnd, handleTouchMove]);\n  return {\n    enableTouchRipple,\n    getRippleHandlers\n  };\n};\n\nexport default useTouchRipple;","map":{"version":3,"sources":["/Users/a81701/mitsuiHackathon/hackathon/node_modules/@mui/material/useTouchRipple/useTouchRipple.js"],"names":["React","useEventCallback","useTouchRipple","props","disabled","disableFocusRipple","disableRipple","disableTouchRipple","focusVisible","rippleRef","useEffect","_rippleRef$current","current","pulsate","useRippleHandler","rippleAction","skipRippleAction","event","keydownRef","useRef","handleKeyDown","key","stop","_rippleRef$current2","start","handleKeyUp","defaultPrevented","_rippleRef$current3","handleBlur","handleMouseDown","handleContextMenu","handleDragLeave","handleMouseUp","handleMouseLeave","handleTouchStart","handleTouchEnd","handleTouchMove","mountedState","setMountedState","useState","enableTouchRipple","getRippleHandlers","useMemo","rippleHandlers","onBlur","onKeyDown","onKeyUp","onMouseDown","onMouseUp","onMouseLeave","onContextMenu","onDragLeave","onTouchStart","onTouchEnd","onTouchMove","otherEvents","eventNames","Object","keys","wrappedEvents","map","eventName","name","handler","ev","_otherEvents$eventNam","call","reduce","acc"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useEventCallback } from '../utils';\n\nconst useTouchRipple = props => {\n  const {\n    disabled,\n    disableFocusRipple,\n    disableRipple,\n    disableTouchRipple,\n    focusVisible,\n    rippleRef\n  } = props;\n  React.useEffect(() => {\n    if (focusVisible && !disableFocusRipple && !disableRipple) {\n      var _rippleRef$current;\n\n      (_rippleRef$current = rippleRef.current) == null ? void 0 : _rippleRef$current.pulsate();\n    }\n  }, [rippleRef, focusVisible, disableFocusRipple, disableRipple]);\n\n  function useRippleHandler(rippleAction, skipRippleAction = disableTouchRipple) {\n    return useEventCallback(event => {\n      if (!skipRippleAction && rippleRef.current) {\n        rippleRef.current[rippleAction](event);\n      }\n\n      return true;\n    });\n  }\n\n  const keydownRef = React.useRef(false);\n  const handleKeyDown = useEventCallback(event => {\n    if (!disableFocusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {\n      keydownRef.current = true;\n      rippleRef.current.stop(event, () => {\n        var _rippleRef$current2;\n\n        rippleRef == null ? void 0 : (_rippleRef$current2 = rippleRef.current) == null ? void 0 : _rippleRef$current2.start(event);\n      });\n    }\n  });\n  const handleKeyUp = useEventCallback(event => {\n    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed\n    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0\n    if (!disableFocusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {\n      keydownRef.current = false;\n      rippleRef.current.stop(event, () => {\n        var _rippleRef$current3;\n\n        rippleRef == null ? void 0 : (_rippleRef$current3 = rippleRef.current) == null ? void 0 : _rippleRef$current3.pulsate(event);\n      });\n    }\n  });\n  const handleBlur = useRippleHandler('stop', false);\n  const handleMouseDown = useRippleHandler('start');\n  const handleContextMenu = useRippleHandler('stop');\n  const handleDragLeave = useRippleHandler('stop');\n  const handleMouseUp = useRippleHandler('stop');\n  const handleMouseLeave = useRippleHandler('stop');\n  const handleTouchStart = useRippleHandler('start');\n  const handleTouchEnd = useRippleHandler('stop');\n  const handleTouchMove = useRippleHandler('stop');\n  const [mountedState, setMountedState] = React.useState(false);\n  React.useEffect(() => {\n    setMountedState(true);\n  }, []);\n  const enableTouchRipple = mountedState && !disableRipple && !disabled;\n  const getRippleHandlers = React.useMemo(() => {\n    const rippleHandlers = {\n      onBlur: handleBlur,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseLeave: handleMouseLeave,\n      onContextMenu: handleContextMenu,\n      onDragLeave: handleDragLeave,\n      onTouchStart: handleTouchStart,\n      onTouchEnd: handleTouchEnd,\n      onTouchMove: handleTouchMove\n    };\n    return (otherEvents = {}) => {\n      const eventNames = Object.keys(rippleHandlers);\n      const wrappedEvents = eventNames.map(eventName => ({\n        name: eventName,\n        handler: ev => {\n          var _otherEvents$eventNam;\n\n          (_otherEvents$eventNam = otherEvents[eventName]) == null ? void 0 : _otherEvents$eventNam.call(otherEvents, ev);\n          rippleHandlers[eventName](ev);\n        }\n      }));\n      return wrappedEvents.reduce((acc, current) => {\n        acc[current.name] = current.handler;\n        return acc;\n      }, {});\n    };\n  }, [handleBlur, handleKeyDown, handleKeyUp, handleMouseDown, handleMouseUp, handleMouseLeave, handleContextMenu, handleDragLeave, handleTouchStart, handleTouchEnd, handleTouchMove]);\n  return {\n    enableTouchRipple,\n    getRippleHandlers\n  };\n};\n\nexport default useTouchRipple;"]},"metadata":{},"sourceType":"module"}